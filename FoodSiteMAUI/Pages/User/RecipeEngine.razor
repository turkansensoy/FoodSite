@page "/recipeEngine"
@layout MainLayout
@using Entities.Dtos;

@inject IMaterialService _materialService;
@inject IRecipeService _recipeService;
<MudGrid>
    <MudItem sm="6" md="4">
        <MudText Typo="Typo.h5">Ne Pişirsem<MudImage Src="images/estricted.gif" Height="40" Width="40"></MudImage></MudText>
    </MudItem>
</MudGrid>
<br />
<MudForm Model="AddContainAndNotContainMaterial">
    <div>
        <MudChipSet AllClosable="true" OnClose="Closed">
            @foreach (var value in containMaterials)
            {
                <MudChip Text="@value.MaterialName"></MudChip>
            }
            @foreach (var item in notContainMaterials)
            {
                <MudChip Text="@item.MaterialName" Color="Color.Error"></MudChip>
            }
        </MudChipSet>
        <MudGrid>
            <MudItem sm="6" md="4">
                <MudAutocomplete T=MaterialDto Label="Malzemeler" @bind-Value="AddContainAndNotContainMaterial" SearchFunc="@Search1"
                                 ToStringFunc=DisplayValue
                                 AdornmentColor="Color.Primary" />
            </MudItem>
            <MudItem sm="6" md="4">
                <br />
                <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="Add">Olsun</MudButton>
                <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" OnClick="NotAdd">Olmasın</MudButton>
            </MudItem>
        </MudGrid>
    </div>
</MudForm>
<MudItem>
    <MudCard style="box-shadow: rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px;">
        <MudCardActions Class="d-flex align-start flex-grow-1 gap-4" Elevation="0">
            <MudButton Variant="Variant.Filled" Class="py-2 d-flex flex-1" StartIcon="@Icons.Material.Filled.Add" Style="@($"color:{Colors.Grey.Lighten5}; background:{Colors.Blue.Lighten3};")" OnClick="@(async () => await Submit())">Tarif Ara</MudButton>
        </MudCardActions>
    </MudCard>
</MudItem>
<br />
@if (model == null)
{
    <p>Ekleme yapınız</p>
}
else
{
    @foreach (var item in model)
    {
        <MudItem>
            <MudCard style="box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Style="@($"color:{Colors.Red.Darken1};")">Tarif Adı:</MudText>
                        <MudText Typo="Typo.h6">@item.RecipeName</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudButton Variant="Variant.Filled">Nasıl yapılır?</MudButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudDivider Class="my-2" />
                <MudCardContent>
                    @foreach (var item1 in item.MaterialDtos)
                    {
                        @if (containMaterials.Exists(_ => _.Id == item1.Id) == true)
                        {
                            <MudChip Disabled="false">@item1.MaterialName</MudChip>
                        }
                        else
                        {
                            <MudChip Disabled="true" Variant="Variant.Outlined">@item1.MaterialName</MudChip>
                        }
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
        <br />
    }
}

@code {
    MudForm form;

    MaterialDto AddContainAndNotContainMaterial = new MaterialDto();
    List<MaterialDto> containMaterials = new List<MaterialDto>();
    List<MaterialDto> notContainMaterials = new List<MaterialDto>();// material notcontain
    List<RecipeEngineDto> model = new();
    public void Add()
    {
        if (containMaterials.Contains(AddContainAndNotContainMaterial) != true && notContainMaterials.Contains(AddContainAndNotContainMaterial) != true)
            containMaterials.Add(AddContainAndNotContainMaterial);
        AddContainAndNotContainMaterial = new() { Id = 0, MaterialName = "" };
    }

    public void NotAdd()
    {
        if (containMaterials.Contains(AddContainAndNotContainMaterial) != true && notContainMaterials.Contains(AddContainAndNotContainMaterial) != true)
            notContainMaterials.Add(AddContainAndNotContainMaterial);
        AddContainAndNotContainMaterial = new() { Id = 0, MaterialName = "" };
    }

    public void Closed(MudChip chip)
    {
        var result = containMaterials.Find(_ => _.MaterialName == chip.Text);
        var result2 = notContainMaterials.Find(_ => _.MaterialName == chip.Text);
        if (result != null)
        {
            containMaterials.Remove(result);
        }
        else if (result2 != null)
        {
            notContainMaterials.Remove(result2);
        }

        this.StateHasChanged();
    }
    private Func<MaterialDto, string?> DisplayValue = item => item is null ? null : item.MaterialName;
    private List<MaterialDto> materialDtoSelect;
    List<string> listmaterialDtoSelect = new();
    protected override async Task OnInitializedAsync()
    {
        materialDtoSelect = await _materialService.GetAll();
        if (materialDtoSelect != null)
        {
            foreach (var item in materialDtoSelect)
            {
                listmaterialDtoSelect.Add(item.MaterialName);
            }
        }
    }
    async Task<IEnumerable<MaterialDto>> Search1(string value)
    {
        //return await Task.FromResult(materialDtoSelect.Where(_=>_.MaterialName.ToLower().Contains(value.ToLower())).ToList());
        await Task.Yield();

        if (!string.IsNullOrWhiteSpace(value))
            return materialDtoSelect.Where(item => item.MaterialName.ToLower().Contains(value.ToLower())) ?? materialDtoSelect;

        // return new MaterialDto[0];
        return materialDtoSelect;
    }
    List<RecipeEngineDto> lists = new List<RecipeEngineDto>();
    List<RecipeEngineDto> notlist = new();

    protected void notContain()
    {
        foreach (var list in lists)
        {
            foreach (var item in notContainMaterials)
            {
                foreach (var material in list.MaterialDtos)
                {
                    if (material.Id == item.Id)
                    {
                        var value = lists.Find(_ => _.Id == list.Id);
                        notlist.Add(value);
                    }
                }
            }
        }
        foreach (var item in notlist)
        {
            lists.Remove(item);
        }
        model = lists;
        notlist.Clear();
    }
    private async Task Submit()
    {
        if (containMaterials.Count != 0 && notContainMaterials.Count == 0)
        {
            foreach (var item in containMaterials)
            {
                model = await _recipeService.GetRecipeEngineDtos(item.Id);
            }
        }
        else if (containMaterials.Count != 0 && notContainMaterials.Count != 0)
        {
            foreach (var item in containMaterials)
            {
                lists = await _recipeService.GetRecipeEngineDtos(item.Id);
            }
            notContain();
        }
        else if (notContainMaterials.Count != 0 && containMaterials.Count == 0)
        {
            // lists değeri eklenecektir.
            lists = await _recipeService.GetAllRecipeEngine();
            notContain();
        }
    }
}