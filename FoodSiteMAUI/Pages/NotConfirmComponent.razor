@page "/notConfirmComponent"
@layout AdminLayout
@using Entities.Concrete;
@using Entities.Dtos;
@inject IRecipeService _recipeService;
@inject IMaterialService _materialService;
@inject IRecipeMaterialService _recipeMaterialService;
@inject NavigationManager NavigatonManager;
<MudBreadcrumbs Items="_items"></MudBreadcrumbs>
<MudDivider Class="my-1" />
<br />
<MudGrid>
    <MudItem sm="6" md="4">
        <MudText Typo="Typo.h5">Onaylanmayan Tariflerim</MudText>
    </MudItem>
</MudGrid>
<br />
@if (listRecipe == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var item in listRecipe)
    {
        @if (item.IsTurnBack == true)
        {
            <MudItem>
                <MudCard style="box-shadow: rgba(50, 50, 93, 0.25) 0px 30px 60px -12px inset, rgba(0, 0, 0, 0.3) 0px 18px 36px -18px inset;">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">@item.RecipeName</MudText>
                        <MudText Typo="Typo.subtitle2" Style="@($"color:{Colors.Red.Darken1};")">Taslak Tarif</MudText>
                    </MudCardHeader>
                    <MudDivider Class="my-2" />
                    <MudCardActions Class="d-flex align-start flex-grow-1 gap-4" Elevation="0">
                        <MudButton Variant="Variant.Filled" Class="py-2 d-flex flex-1" StartIcon="@Icons.Material.Filled.Edit" Href="@($"/updaterecipeMaterialForm/{@item.Id}")">Taslağı Düzenle</MudButton>
                        <MudButton Variant="Variant.Filled" Class="py-2 d-flex flex-1" StartIcon="@Icons.Material.Filled.Edit" Style="@($"color:{Colors.Grey.Lighten5}; background:{Colors.BlueGrey.Lighten1};")" OnClick="()=>SendItemAsync(item.Id)">Onaya Gönder</MudButton>
                        <MudButton Variant="Variant.Filled" Class="py-2 d-flex flex-1" StartIcon="@Icons.Material.Filled.Delete" Style="@($"color:{Colors.Grey.Lighten5}; background:{Colors.Red.Darken1};")" OnClick="()=>DeleteItem(item.Id)">Taslağı Sil</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <br />
        }
    }
}
@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("AnaSayfa", href: "/admin", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Onaylanmayan Tariflerim", href: null, disabled: true, icon: Icons.Material.Filled.Deselect)
    };
    private List<RecipeDto> listRecipe;
    List<MultiSelectMaterialDto> ListMultiSelectMaterial = new();

    protected async override Task OnInitializedAsync()
    {
        listRecipe = await _recipeService.GetAll();
    }
    private async void DeleteItem(int id)
    {
        var result = await _materialService.GetMultiSelectMaterial(id);
        if (result != null)
        {
            foreach (var item in result)
            {
                _recipeMaterialService.Delete(item.id);
            }
        }
        _recipeService.Delete(id);
    }
    private async void SendItemAsync(int id)
    {
        Recipe recipeItem = await _recipeService.GetById(id);
        ListMultiSelectMaterial = await _materialService.GetMultiSelectMaterial(id);
        RecipeDto recipeAdd = new()
            {
                Id = recipeItem.Id,
                RecipeName = recipeItem.RecipeName,
                RecipeContent = recipeItem.RecipeContent,
                Image = recipeItem.Image,
                NumberofPerson = recipeItem.NumberofPerson,
                PreparationTime = recipeItem.PreparationTime,
                CookingTime = recipeItem.CookingTime,
                UserName = recipeItem.UserName,
                UserEmail = recipeItem.UserEmail,
                RecipeDateTime = DateTime.Now,
                IsConfirm = false,
                IsSend = true,
                IsTurnBack = false,
                CategoryId = recipeItem.CategoryId
            };
        recipeAdd.recipeMaterialDtos = new List<RecipeMaterialDto>();
        foreach (var item in ListMultiSelectMaterial)
        {
            RecipeMaterialDto recipeMaterial = new()
                {
                    Id = item.id,
                    MaterialId = item.MaterialId,
                    Guantity = item.Guantity,
                    MaterialNumber = item.MaterialNumber
                };
            recipeAdd.recipeMaterialDtos.Add(recipeMaterial);
        }
        var result = await _recipeService.Update(recipeAdd);
        NavigatonManager.NavigateTo("/notConfirmComponent", forceLoad: true);
    }
}
