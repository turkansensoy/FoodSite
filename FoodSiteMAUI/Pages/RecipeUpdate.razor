@page "/recipeUpdate/{id}"
@using Business.ValidationRules.FluentValidation;
@using Entities.Concrete;
@using FoodSiteMAUI.Data.Services.Abstract;


@inject IRecipeService _recipeService;
@inject ICategoryService _categoryService;
@inject NavigationManager NavigatonManager;

<br />
<MudContainer>
    <MudCard>
        <MudForm Model="@model" @ref="@form" Validation="@(recipeValidator.ValidateValue)" ValidationDelay="0">
            <MudCardContent>
                <MudTextField @bind-Value="model.Id"
                              hidden />
                <MudTextField @bind-Value="model.UserName"
                              Label="User Name" />
                <MudTextField @bind-Value="model.UserEmail"
                              Label="User Email" />

                <MudTextField @bind-Value="model.RecipeName"
                              Label="Tarif adı"
                              For="@(()=>model.RecipeName)"
                              Immediate="true" />

                <MudNumericField Label="Kaç Kişilik"
                                 @bind-Value="model.NumberofPerson"
                                 For="@(()=>model.NumberofPerson)" />

                <MudNumericField @bind-Value="model.PreparationTime"
                                 Label="Hazırlanma Süresi"
                                 For="@(()=>model.PreparationTime)" />

                <MudNumericField @bind-Value="model.CookingTime"
                                 Label="Pişirme Süresi"
                                 For="@(()=>model.CookingTime)" />

                <MudTextField @ref="multilineReference" Variant="Variant.Text" Lines="4" Adornment="Adornment.End"
                              @bind-Value="model.Materials"
                              Label="Malzemeler"
                              For="@(() => model.Materials)"
                              Immediate="true" />
                <MudTextField @ref="multilineReference" Variant="Variant.Text" Lines="4" Adornment="Adornment.End"
                              @bind-Value="model.RecipeContent"
                              Immediate="true"
                              For="@(() => model.RecipeContent)"
                              Label="Hazırlanışı" />
                <MudSelect Label="Kategori" @bind-Value="model.CategoryId">
                    @if (categorynameselect != null)
                    {
                        @foreach (var item in categorynameselect)
                        {
                            <MudSelectItem Value="item.Id">@item.CategoryName</MudSelectItem>
                        }
                    }
                </MudSelect>
                <br />
                <MudImage Label="Resim Yükleme" Src="@_userAvatar" @onclick="DisplayAction" Height="100" Width="100" Elevation="25" Class="rounded my-2"></MudImage>
            </MudCardContent>
        </MudForm>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Kaydet</MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>
@code {
    [Parameter]
    public string id { get; set; }

    private MudTextField<string> multilineReference;
    MudForm form;
    Recipe model = new Recipe();
    RecipeValidator recipeValidator = new RecipeValidator();

    private string _imageBase64Data;
    private string _userAvatar = "images/cooking.png";

    private List<Category> categorynameselect;
    protected override async Task OnInitializedAsync()
    {
        model = await _recipeService.GetById(Convert.ToInt32(id));
        categorynameselect = await _categoryService.GetAll();
    }
    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            if (!string.IsNullOrWhiteSpace(_imageBase64Data))
            {
                model.Image = _imageBase64Data;
            }
            var response = await _recipeService.Update(model);
            NavigatonManager.NavigateTo("/senderRecipe", forceLoad: true);
        }
    }
    private async void DisplayAction()
    {
        var photo = await MediaPicker.Default.PickPhotoAsync();
        if (photo != null)
        {
            byte[] imageBytes;
            var newFile = Path.Combine(FileSystem.CacheDirectory, photo.FileName);
            var stream = await photo.OpenReadAsync();
            using (MemoryStream ms = new MemoryStream())
            {
                stream.CopyTo(ms);
                imageBytes = ms.ToArray();
            }
            _imageBase64Data = Convert.ToBase64String(imageBytes);
            _userAvatar = string.Format("data:image/png;base64,{0}", _imageBase64Data);
            this.StateHasChanged();
        }
    }
}
