@page "/recipeEngine"
@using Entities.Dtos;

@inject IMaterialService _materialService;
@inject IRecipeService _recipeService;
<MudBreadcrumbs Items="_items"></MudBreadcrumbs>
<MudDivider Class="my-1" />
<br />
<MudGrid>
    <MudItem sm="6" md="4">
        <MudText Typo="Typo.h5">Ne Pişirsem<MudImage Src="images/estricted.gif" Height="40" Width="40"></MudImage></MudText>
    </MudItem>
</MudGrid>
<br />
<div>
    <MudChipSet AllClosable="true" OnClose="Closed">
        @foreach (var value in values)
        {
            <MudChip Text="@value"></MudChip>
        }
        @foreach (var item in values1)
        {
            <MudChip Text="@item" Color="Color.Error"></MudChip>
        }
    </MudChipSet>
    <MudGrid>
        <MudItem sm="6" md="4">
            <MudAutocomplete T="string" Label="Malzemeler" @bind-Value="TextValue" SearchFunc="@Search1"
                             AdornmentColor="Color.Primary" />
        </MudItem>
        <MudItem sm="6" md="4">
            <br />
            <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="Add">Olsun</MudButton>
            <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" OnClick="NotAdd">Olmasın</MudButton>
        </MudItem>
    </MudGrid>
</div>
<MudItem>
    <MudCard style="box-shadow: rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px;">
        <MudCardActions Class="d-flex align-start flex-grow-1 gap-4" Elevation="0">
            <MudButton Variant="Variant.Filled" Class="py-2 d-flex flex-1" StartIcon="@Icons.Material.Filled.Add" Style="@($"color:{Colors.Grey.Lighten5}; background:{Colors.Blue.Lighten3};")" OnClick="@(async () => await Submit())">Sorgula</MudButton>
        </MudCardActions>
    </MudCard>
</MudItem>
<br />
@if (model== null)
{
    <p>Ekleme yapınız</p>
}
else
{
    @foreach (var item in model)
    {
        <MudItem>
            <MudCard style="box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Style="@($"color:{Colors.Red.Darken1};")">Tarif Adı:</MudText>
                        <MudText Typo="Typo.h6">@item.RecipeName</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudButton Variant="Variant.Filled">Nasıl yapılır?</MudButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudDivider Class="my-2" />
                <MudCardContent>
                    @foreach (var item1 in item.MaterialDtos)
                    {
                        @if (values.Contains(item1.MaterialName) == true)
                        {
                            <MudChip Disabled="false">@item1.MaterialName</MudChip>
                        }
                        else
                        {
                            <MudChip Disabled="true" Variant="Variant.Outlined">@item1.MaterialName</MudChip>
                        }
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
        <br />
    }
}

@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "#", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Videos", href: "#", icon: Icons.Material.Filled.VideoLibrary),
        new BreadcrumbItem("Create", href: null, disabled: true, icon: Icons.Material.Filled.Create)
    };
    MudForm form;

    public string TextValue { get; set; }
    List<string> values = new List<string>(); // material contain
    List<string> values1 = new List<string>();// material notcontain
    List<RecipeEngineDto> model = new();
    public void Add()
    {
        if (values.Contains(TextValue) == false)
        {
            values.Add(TextValue);   
        }
    }
    public void NotAdd()
    {
        if (values1.Contains(TextValue) == false && values.Contains(TextValue) == false)
        {
            values1.Add(TextValue);      
        }
    }

    public void Closed(MudChip chip)
    {
        if (values.Contains(chip.Text) == true)
        {
            values.Remove(chip.Text);
        }
        else
        {
            values1.Remove(chip.Text);
        }
    }

    private List<MaterialDto> materialDtoSelect;
    List<string> listmaterialDtoSelect = new();
    protected override async Task OnInitializedAsync()
    {
        materialDtoSelect = await _materialService.GetAll();
        if (materialDtoSelect != null)
        {
            foreach (var item in materialDtoSelect)
            {
                listmaterialDtoSelect.Add(item.MaterialName);
            }
        }
    }
    async Task<IEnumerable<string>> Search1(String value)
    {
        await Task.Delay(5);
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return listmaterialDtoSelect.Where(_ => _.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    List<RecipeEngineDto> lists = new List<RecipeEngineDto>();
    List<RecipeEngineDto> notlist= new();
    protected void notContain()
    {
        foreach (var list in lists)
        {
            foreach (var item in values1)
            {
                foreach (var material in list.MaterialDtos)
                {
                    if (material.MaterialName == item)
                    {
                        var value = lists.Find(_ => _.Id == list.Id);
                        notlist.Add(value);
                    }
                }
            }
        }
        foreach (var item in notlist)
        {
            lists.Remove(item);
        }
        model = lists;
        notlist.Clear();
    }
    private async Task Submit()
    {
        if(values.Count !=0 && values1.Count ==0 )
        {
            foreach (var item in values)
            {
                model = await _recipeService.GetRecipeEngineDtos(item);
            }
        }
        else if(values.Count !=0 &&  values1.Count !=0)
        {
            foreach (var item in values)
            {
                lists = await _recipeService.GetRecipeEngineDtos(item);
            }
            notContain();
        }
        else if (values1.Count !=0 && values.Count ==0)
        {
            // lists değeri eklenecektir.
            lists =await _recipeService.GetAllRecipeEngine();
            notContain();
        }
    }
}
